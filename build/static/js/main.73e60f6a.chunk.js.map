{"version":3,"sources":["components/pop-quiz.png","components/NavBar.js","components/InfoSplash.js","components/PlayGameTestTwo.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","NavBar","state","username","password","className","to","src","require","alt","Component","InfoSplash","PlayGame","spokenWords","recognising","sentence","toggleStartStop","recognition","stop","reset","start","setState","words","this","window","webkitSpeechRecognition","continuous","onend","onresult","e","console","log","speechRecognitionList","results","finalWords","i","length","speechRecognitionTranscript","transcript","prevState","props","_","difference","replace","toLowerCase","split","join","sentenceLength","wordsLeft","filter","wrd","percentageComplete","onClick","style","height","value","onChange","handleChange","maxLength","cols","rows","Login","Signup","Quizzes","App","path","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.73e60f6a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/pop-quiz.25f1e893.png\";","import React, { Component } from 'react'\n// import { Route, Router } from 'react-router'; //do I need this? \nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Link\n} from 'react-router-dom';\n\n// // function just takes you home to spash page or your card collection \n// function goHome() {\n//     return (\n\n//     )\n// }\n\nexport default class NavBar extends Component {\n\n    state = {\n        username: '',\n        password: ''\n    }\n\n    render() {\n        return (\n            <nav className=\"nav-bar\">\n                <Link to=\"/\">\n                <img className=\"logo-img\" src={require(\"./pop-quiz.png\")} alt=\"Logo\" />\n                </Link>\n                <div className=\"nav-links-mid\">\n                    <Link to=\"/quizzes\">Quizzes</Link>\n                </div>\n                <div className=\"nav-links\">\n                    <Link to=\"/login\">Login</Link>\n                    <Link to=\"/signup\">Signup</Link>\n                    {/* If logged in/ session is active */}\n                    <Link to=\"/playgame\">New game</Link>\n                </div>\n            </nav>\n        )\n    }\n}","import React, { Component } from 'react'\n\nexport default class InfoSplash extends Component {\n\n\n    render() {\n        return (\n            <div className=\"info-splash\">\n                <h1>More about PopQuiz</h1>\n                <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Nihil expedita laboriosam amet mollitia nemo alias necessitatibus id voluptates aut ipsa quisquam earum repellat, iure accusantium excepturi, neque, quae explicabo corporis! Lorem ipsum dolor sit amet consectetur adipisicing elit. Saepe quod atque neque iusto sequi assumenda, accusantium perspiciatis voluptatum ad obcaecati suscipit dolores. Doloremque earum, asperiores excepturi doloribus minima fugiat at. Lorem ipsum dolor sit, amet consectetur adipisicing elit. Maxime cupiditate eaque commodi voluptas maiores voluptate ipsa neque sed, sunt voluptates cumque in illum ex praesentium ipsam quas nihil accusantium optio!\n                </p>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport _ from 'underscore';\n// speech recognition javascript\n\n// game scoring system \n\nexport default class PlayGame extends Component {\n\n    state = {\n        spokenWords: '',\n        recognising: false,\n        sentence: 'GA is the best'\n    }     \n    \n\n    componentDidMount() {\n        this.recognition = new window.webkitSpeechRecognition();\n        this.recognition.continuous = true;\n        // this.recognition.interimResults = true;\n        this.reset();\n        this.recognition.onend = this.reset;\n\n        this.recognition.onresult = (e) => {\n            console.log('fired')\n            const speechRecognitionList = e.results\n            var finalWords = ''\n            for (var i = 0; i < speechRecognitionList.length; i++) {\n                let speechRecognitionTranscript = speechRecognitionList[i][0].transcript\n                // var finalWordsResult = this.assessSpokenWords(speechRecognitionTranscript)\n                finalWords = finalWords += speechRecognitionTranscript\n            }\n            this.setState((prevState, props) => { \n                if (prevState.words.length > 10) {\n                    console.log('finished');\n                    this.recognition.stop();\n                    return {\n                        recognising: false\n                    }\n                } else {\n                    return {\n                        spokenWords: finalWords\n                    }\n                }\n            })\n        }   \n    }\n\n    wordsLeft(spokenWords) {\n        var differenceBetweenWords = _.difference(\n            this.state.sentence\n                .replace(/[^A-Za-z0-9'\\ ]/g, \"\")\n                .toLowerCase()\n                .split(\" \"),\n            spokenWords.split(\" \"))\n        return differenceBetweenWords.join(\" \")\n    }\n    \n    toggleStartStop = () => {\n        if (this.state.recognising) {\n            this.recognition.stop();\n            this.reset();\n        } else {\n            this.recognition.start();\n            this.setState({\n                recognising: true,\n                words: []\n            })\n        }\n    }\n\n    reset = () => {\n        this.setState({\n            recognising: false\n        })\n    }\n\n\n    render() {\n        const sentenceLength = this.state.sentence.split(\" \").length \n        const wordsLeft = this.wordsLeft(this.state.spokenWords)\n            .split(\" \")\n            .filter(wrd => wrd)\n            .length\n        const percentageComplete = `${wordsLeft / sentenceLength * 100}%`\n\n        return (\n            <div>\n              <h1>Speech recognition prototype</h1>\n              <p>Click the button and test speech output to the screen</p>\n              <br />\n                <button onClick={this.toggleStartStop}>\n                    { this.state.recognising ? \"Click to stop\" : \"Start recording\" }\n                </button>\n              <br />\n                <p>Output voice text should go under here: </p>\n                <p>{this.state.spokenWords}</p>\n                <h1>Sentence you are guessing</h1>\n                <div className=\"progress-bar\">\n                    <div style={{ height: percentageComplete }}></div>\n                </div>\n                <form>\n                    <textarea\n                        value={this.wordsLeft(this.state.spokenWords)}\n                        onChange={this.handleChange}\n                        maxLength=\"150\"\n                        cols=\"30\"\n                        rows=\"10\">\n                    </textarea>\n                </form>\n            </div>\n          )\n    }\n}\n\n\n\n// comparison array \n// actualSentenceArr.reduce((wordsThatMatch, word, idx) => word === transcriptArr[idx] ? [...wordsThatMatch, word] : wordsThatMatch, []).length\n","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from 'react-router-dom';\nimport NavBar from './components/NavBar';\nimport InfoSplash from './components/InfoSplash';\nimport PlayGame from './components/PlayGameTestTwo';\nimport './components/NavBar.css';\nimport './components/InfoSplash.css';\nimport './components/PlayGame.css';\nimport './App.css';\n//import { Route, Router } from 'react-router';\n\nfunction Home() {\n  return (\n    <div>Home works</div>\n  )\n}\n\nfunction Login() {\n  return (\n      <div>Login works</div>\n    )\n}\n\nfunction Signup() {\n  return (\n    <div>Signup works</div>\n    )\n}\n\nfunction Quizzes() {\n  return (\n    <div>quizzes working</div>\n  )\n}\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <NavBar />\n\n        <Switch>\n          \n          <Route path=\"/login\">\n            <Login />\n          </Route>\n          <Route path=\"/signup\">\n            <Signup />\n          </Route>\n          <Route path=\"/playgame\">\n            <PlayGame />\n          </Route>\n          <Route path=\"/quizzes\">\n            <Quizzes />\n          </Route>\n          <Route path=\"/\">\n            <InfoSplash />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}